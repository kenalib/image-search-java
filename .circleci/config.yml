# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn integration-test

  deploy:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.21.1/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - run: echo "-----BEGIN CERTIFICATE-----" > ca.pem
      - run: echo $DOCKER_CA_PEM | tr " " "\n" >> ca.pem
      - run: echo "-----END CERTIFICATE-----" >> ca.pem

      - run: echo "-----BEGIN CERTIFICATE-----" > cert.pem
      - run: echo $DOCKER_CERT_PEM | tr " " "\n" >> cert.pem
      - run: echo "-----END CERTIFICATE-----" >> cert.pem

      - run: echo "-----BEGIN RSA PRIVATE KEY-----" > key.pem
      - run: echo $DOCKER_KEY_PEM | tr " " "\n" >> key.pem
      - run: echo "-----END RSA PRIVATE KEY-----" >> key.pem

      - run: ls -lrt

      - run: docker version
      - run: docker-compose version
      - run: openssl version -a

      - run: docker-compose --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=$DOCKER_HOST up -d --build

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
